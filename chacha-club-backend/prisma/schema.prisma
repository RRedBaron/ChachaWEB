// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_CHACHA_CLUB_DB_DDL_URL")
}

model Role {
    id   Int    @id @default(autoincrement())
    name String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    User User[]
}

model User {
    id       Int    @id @default(autoincrement())
    username String @unique
    password String
    email    String @unique
    role_id  Int

    isVerified Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    role       Role         @relation(fields: [role_id], references: [id])
    Review     Review[]
    EmailToken EmailToken[]
}

model EmailToken {
    id        Int      @id @default(autoincrement())
    userId    Int
    token     String   @unique
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
}

model Category {
    id   Int    @id @default(autoincrement())
    name String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    dishes    Dish[]
}

model Dish {
    id           Int     @id @default(autoincrement())
    name         String
    description  String?
    image        String
    price        Float
    weight       Int
    time_to_cook Int
    category_id  Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    category        Category          @relation(fields: [category_id], references: [id])
    Review          Review[]
    ingredient_dish Ingredient_Dish[]
}

model Ingredient {
    id   Int    @id @default(autoincrement())
    name String

    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    ingredient_dish Ingredient_Dish[]
}

model Ingredient_Dish {
    id            Int @id @default(autoincrement())
    ingredient_id Int
    dish_id       Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ingredient Ingredient @relation(fields: [ingredient_id], references: [id])
    dish       Dish       @relation(fields: [dish_id], references: [id])
}

model Review {
    id      Int     @id @default(autoincrement())
    rating  Int
    comment String?
    dish_id Int
    user_id Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [user_id], references: [id])
    dish Dish @relation(fields: [dish_id], references: [id])
}
